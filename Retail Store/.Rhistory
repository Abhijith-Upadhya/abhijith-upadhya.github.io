arrange(desc(Win_Count))
num_parties <- nrow(winners_count)
party_colors <- colorRampPalette(brewer.pal(9, "Reds"))(num_parties)
# Plot the bar graph
ggplot(winners_count, aes(x = reorder(Party, -Win_Count), y = Win_Count, fill = Party)) +
geom_bar(stat = "identity") +
labs(title = "Number of Winners from Each Party (More than 8 Wins)",
x = "Party",
y = "Number of Winners") +
scale_fill_manual(values = party_colors) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
party_colors <- colorRampPalette(brewer.pal(9, "Reds"))(desc(num_parties))
party_colors <- colorRampPalette(brewer.pal(9, "Reds"))(num_parties)
party_colors <- colorRampPalette(brewer.pal(9, "Oranges"))(num_parties)
ggplot(winners_count, aes(x = reorder(Party, -Win_Count), y = Win_Count, fill = Party)) +
geom_bar(stat = "identity") +
labs(title = "Number of Winners from Top Parties",
x = "Party",
y = "Number of Winners") +
scale_fill_manual(values = party_colors) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
win_loss_count <- df %>%
group_by(Party, Winner) %>%
summarise(Count = n()) %>%
spread(key = Winner, value = Count, fill = 0) %>%
mutate(Total = Yes + No) %>%
arrange(desc(Total)) %>%
top_n(15, Total) # Select the top 15 parties by total wins and losses
win_loss_count <- df %>%
group_by(Party, Winner) %>%
summarise(Count = n()) %>%
spread(key = Winner, value = Count, fill = 0) %>%
mutate(Total = 1 + 0) %>%
arrange(desc(Total)) %>%
top_n(15, Total)
ggplot(win_loss_count, aes(x = reorder(Party, Total), y = Yes, fill = Winner)) +
geom_bar(stat = "identity", position = "stack") +
geom_bar(aes(y = -No), stat = "identity", fill = "red", position = "stack") +
labs(title = "Win-Loss Relationship for Top 15 Parties",
x = "Party",
y = "Count",
fill = "Result") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(win_loss_count, aes(x = reorder(Party, Total), y = 1, fill = Winner)) +
geom_bar(stat = "identity", position = "stack") +
geom_bar(aes(y = -0), stat = "identity", fill = "red", position = "stack") +
labs(title = "Win-Loss Relationship for Top 15 Parties",
x = "Party",
y = "Count",
fill = "Result") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
win_loss_count <- df %>%
group_by(Party) %>%
summarise(Wins = sum(Winner == 1),
Losses = sum(Winner == 0)) %>%
mutate(Total = Wins + Losses) %>%
top_n(15, Total) %>%
arrange(desc(Total))
win_loss_melted <- win_loss_count %>%
pivot_longer(cols = c(Wins, Losses), names_to = "Result", values_to = "Count")
ggplot(win_loss_melted, aes(x = reorder(Party, Total), y = Count, fill = Result)) +
geom_bar(stat = "identity") +
labs(title = "Win-Loss Relationship for Top 15 Parties",
x = "Party",
y = "Count",
fill = "Result") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(win_loss_melted, aes(x = reorder(Party, -Total), y = Count, fill = Result)) +
geom_bar(stat = "identity") +
labs(title = "Win-Loss Relationship for Top 15 Parties",
x = "Party",
y = "Count",
fill = "Result") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(win_loss_melted, aes(x = reorder(Party, -Total), y = Count, fill = Result)) +
geom_bar(stat = "identity") +
labs(title = "Win-Loss Relationship for Top 15 Parties",
x = "Party",
y = "Count",
fill = "Result") +
scale_fill_manual(values = c("Win" = "green", "Loss" = "red"))
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(win_loss_melted, aes(x = reorder(Party, -Total), y = Count, fill = Result)) +
geom_bar(stat = "identity") +
labs(title = "Win-Loss Relationship for Top 15 Parties",
x = "Party",
y = "Count",
fill = "Result") +
scale_fill_manual(values = c("Win" = "green", "Loss" = "red")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
win_loss_melted <- win_loss_count %>%
pivot_longer(cols = c(Wins, Losses), names_to = "Result", values_to = "Count")
ggplot(win_loss_melted, aes(x = reorder(Party, -Total), y = Count, fill = Result)) +
geom_bar(stat = "identity") +
labs(title = "Win-Loss Relationship for Top 15 Parties",
x = "Party",
y = "Count",
fill = "Result") +
scale_fill_manual(values = c("Win" = "green", "Loss" = "red")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Plot the win-loss relationship for top 15 parties in a stacked bar graph
ggplot(win_loss_melted, aes(x = reorder(Party, -Total), y = Count, fill = Result)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Win" = "green", "Loss" = "red")) +
labs(title = "Win-Loss Relationship for Top 15 Parties",
x = "Party",
y = "Count",
fill = "Result") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
win_loss_count <- df %>%
group_by(Party) %>%
summarise(Wins = sum(Winner == 1),
Losses = sum(Winner == 0)) %>%
top_n(15, Total) %>%
pivot_longer(cols = c(Wins, Losses), names_to = "Result", values_to = "Count")
win_loss_count <- df %>%
group_by(Party) %>%
summarise(Wins = sum(Winner == 1),
Losses = sum(Winner == 0)) %>%
top_n(15, Wins) %>%
pivot_longer(cols = c(Wins, Losses), names_to = "Result", values_to = "Count")
ggplot(win_loss_melted, aes(x = reorder(Party, -Total), y = Count, fill = Result)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Win" = "green", "Loss" = "red"), breaks = c("Wins", "Losses")) +
labs(title = "Win-Loss Relationship for Top 15 Parties",
x = "Party",
y = "Count",
fill = "Result") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(win_loss_melted, aes(x = reorder(Party, -Total), y = Count, fill = Result)) +
geom_bar(stat = "identity") +
labs(title = "Win-Loss Relationship for Top 15 Parties",
x = "Party",
y = "Count",
fill = "Result") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
library(plotly)
p = ggplot(win_loss_melted, aes(x = reorder(Party, -Total), y = Count, fill = Result)) +
geom_bar(stat = "identity") +
labs(title = "Win-Loss Relationship for Top 15 Parties",
x = "Party",
y = "Count",
fill = "Result") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
p = ggplotly(p, tooltip = "text")
p = ggplotly(p, tooltip = c("Count"))
p = ggplot(win_loss_count, aes(x = reorder(Party, -Total), y = Count, fill = Result)) +
geom_bar(stat = "identity") +
labs(title = "Win-Loss Relationship for Top 15 Parties",
x = "Party",
y = "Count",
fill = "Result") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
p = ggplotly(p, tooltip = c("Count"))
p = ggplot(win_loss_count, aes(x = reorder(Party, -Wins), y = Count, fill = Result)) +
geom_bar(stat = "identity") +
labs(title = "Win-Loss Relationship for Top 15 Parties",
x = "Party",
y = "Count",
fill = "Result") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
p = ggplotly(p, tooltip = c("Count"))
p = ggplot(win_loss_count, aes(x = Party, y = Count, fill = Result)) +
geom_bar(stat = "identity") +
labs(title = "Win-Loss Relationship for Top 15 Parties",
x = "Party",
y = "Count",
fill = "Result") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
p = ggplotly(p, tooltip = c("Count"))
party_win_loss <- df %>%
group_by(Party) %>%
summarise(Wins = sum(Winner == 1),
Losses = sum(Winner == 0)) %>%
# Filter for top 15 parties based on wins
top_n(15, Wins) %>%
# Melt the dataframe for plotting
pivot_longer(cols = c(Wins, Losses), names_to = "Result", values_to = "Count")
p <- ggplot(party_win_loss, aes(x = reorder(Party, Wins), y = Count, fill = Result)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = c("Win" = "green", "Loss" = "red"),
breaks = c("Wins", "Losses")) +  # Specify breaks explicitly
labs(title = "Win-Loss Relationship for Top 15 Parties",
x = "Party",
y = "Count",
fill = "Result") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Convert ggplot object to plotly
ggplotly(p, tooltip = c("Count"))
p <- ggplot(party_win_loss, aes(x = reorder(Party, Wins), y = Count, fill = Result)) +
geom_bar(stat = "identity") +
labs(title = "Win-Loss Relationship for Top 15 Parties",
x = "Party",
y = "Count",
fill = "Result") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
?pivot_longer
setwd("C:/Users/Saiprasad Adiga/Desktop/Abhijith/Data/Retail Store")
install.packages("ggplot2", "dplyr", "readr", "lubridate", "reshape2")
install.packages("ggplot2", "dplyr", "readr", "lubridate", "reshape2")
install.packages("gridExtra", "caret", "tidyverse", "tidyr")
install.packages("stats", "car")
install.packages("stats", "car")
install.packages("flexdashboard")
install.packages("repr")
install.packages("DT")
install.packages("fontawesome")
library(fontawesome)
library(DT)
library(repr)
library(flexdashboard)
library(ggplot2)
library(dplyr)
library(readr)
library(lubridate)
library(reshape2)
library(gridExtra)
library(caret)
library(tidyverse)
library(tidyr)
library(stats)
# Read the CSV file
data <- read_csv("retail_store.csv")
# Convert 'Date' column to Date and extract the 'Year'
data$Date <- as.Date(data$Date)
data$Year <- year(data$Date)
data$Year
# Add 'Revenue' column
data$Revenue <- data$Units_sold * data$Price
View(data)
# Filter out rows where 'Price' and 'Units_sold' are not 0
df <- data %>% filter(Price != 0, Units_sold != 0)
# Data info
str(data)
options(repr.plot.width = 10, repr.plot.height = 4)
# Descriptive statistics for 'Units_sold', 'Price', and 'Revenue'
summary(data[, c("Units_sold", "Price", "Revenue")])
# Visualization - Price over time
ggplot(df, aes(x = Date, y = Price)) +
geom_line() +
ggtitle("Price over time") +
theme_minimal()
# Visualization - Sales in Units over time
ggplot(df, aes(x = Date, y = Units_sold)) +
geom_line() +
ggtitle("Sales in Units") +
theme_minimal()
# Visualization - Sales Revenues over time
ggplot(df, aes(x = Date, y = Revenue)) +
geom_line() +
ggtitle("Sales Revenues") +
theme_minimal()
# Density Plots
ggplot(df, aes(x = Price)) +
geom_density() +
ggtitle("Price Density") +
theme_minimal()
ggplot(df, aes(x = Stock)) +
geom_density() +
ggtitle("Stock Density") +
theme_minimal()
ggplot(df, aes(x = Units_sold)) +
geom_density() +
ggtitle("Sales Density") +
theme_minimal()
ggplot(df, aes(x = Revenue)) +
geom_density() +
ggtitle("Revenues Density") +
theme_minimal()
# Scatter Plot - Revenues vs Sales by year
ggplot(df, aes(x = Units_sold, y = Revenue, color = as.factor(Year))) +
geom_point() +
ggtitle("Revenues vs Sales by Year") +
theme_minimal()
# Linear model - Revenues vs Sales by year
ggplot(df, aes(x = Units_sold, y = Revenue, color = as.factor(Year))) +
geom_smooth(method = "lm") +
ggtitle("Revenues vs Sales by Year") +
theme_minimal()
# Boxplot - Sales variability compared by year
ggplot(df, aes(x = as.factor(Year), y = Units_sold)) +
geom_boxplot() +
ggtitle("Sales Variability by Year") +
theme_minimal()
# KDE Plot - Sales variability compared by year
ggplot(df, aes(x = Units_sold, color = as.factor(Year))) +
geom_density() +
ggtitle("Sales Variability by Year") +
theme_minimal()
# Analyzing Sales Variability by Price
ggplot(df, aes(x = Price, y = Units_sold, color = as.factor(Year))) +
geom_smooth(method = "lm") +
ggtitle("Sales Variability by Price") +
theme_minimal()
# Rounded Price and Boxplot
df$price_round <- round(df$Price, 1)
ggplot(df, aes(x = as.factor(price_round), y = Units_sold)) +
geom_boxplot() +
ggtitle("Sales by Rounded Price") +
theme_minimal()
# Joint Plot - Rounded Price and Sales
ggplot(df, aes(x = price_round, y = Units_sold, color = as.factor(Year))) +
geom_point() +
ggtitle("Sales vs Rounded Price by Year") +
theme_minimal()
# Stock Analysis over Time
ggplot(df, aes(x = Date, y = Stock)) +
geom_line() +
ggtitle("Stock Analysis Over Time") +
theme_minimal()
# Stock Density by Year
ggplot(df, aes(x = Stock, color = as.factor(Year))) +
geom_density() +
ggtitle("Stock Density by Year") +
theme_minimal()
# Linear Model - Sales vs Stock by year
ggplot(df, aes(x = Units_sold, y = Stock, color = as.factor(Year))) +
geom_smooth(method = "lm") +
ggtitle("Sales vs Stock by Year") +
theme_minimal()
# Joint Plot - Sales vs Stock by Rounded Price
ggplot(df, aes(x = Units_sold, y = Stock, color = as.factor(price_round))) +
geom_point() +
ggtitle("Sales vs Stock by Rounded Price") +
theme_minimal()
# Custom Price Categories
cat_price <- function(price) {
if (price < 1.5) {
return(1)
} else if (price < 2) {
return(1.5)
} else if (price < 2.5) {
return(2)
} else if (price < 3) {
return(2.5)
} else {
return(3)
}
}
df$price_cat <- sapply(df$price_round, cat_price)
# Linear Model - Sales vs Stock with price categories
ggplot(df %>% filter(Units_sold < 350), aes(x = Units_sold, y = Stock, color = as.factor(price_cat))) +
geom_smooth(method = "lm") +
ggtitle("Sales vs Stock by Price Category") +
theme_minimal()
# Boxplot - Stock vs Rounded Price
ggplot(df, aes(x = as.factor(price_round), y = Stock)) +
geom_boxplot() +
ggtitle("Stock by Rounded Price") +
theme_minimal()
# Pivot Table for Sales and Price
sales_pivot <- dcast(df, Price ~ Units_sold, fun.aggregate = mean)
# Bar Plot - Average Sales per Price
ggplot(df, aes(x = as.factor(Price), y = Units_sold)) +
geom_bar(stat = "identity") +
ggtitle("Average Sales per Price") +
theme_minimal()
# Bar Plot - Average Revenues per Price
ggplot(df, aes(x = as.factor(Price), y = Revenue)) +
geom_bar(stat = "identity") +
ggtitle("Average Revenues per Price") +
theme_minimal()
# Scatter Plot - Sales vs Revenues by Price
ggplot(df, aes(x = Units_sold, y = Revenue, color = as.factor(Price))) +
geom_point() +
ggtitle("Sales vs Revenues by Price") +
theme_minimal()
# Create Economic Analysis dataframe
eco <- df %>% select(Date, Stock, Price, Units_sold, Revenue, Year)
# Calculate correlations (equivalent to eco.corr() in Python)
cor(eco %>% select(-Date))  # exclude non-numeric columns for correlation
# Calculate percent change for Stock, Price, Units_sold, and Revenue
eco <- eco %>%
mutate(Stock_delta = (Stock - lag(Stock)) / lag(Stock),
Price_delta = (Price - lag(Price)) / lag(Price),
Units_sold_delta = (Units_sold - lag(Units_sold)) / lag(Units_sold),
Revenue_delta = (Revenue - lag(Revenue)) / lag(Revenue)) %>%
drop_na()  # Removing the first row with NAs
# Price frame where Price_delta is not zero
pf <- eco %>% filter(Price_delta != 0)
# Calculate elasticity
pf <- pf %>% mutate(elasticity = Units_sold_delta / Price_delta)
# Joint Plot equivalent for R (with ggplot2)
ggplot(pf %>% filter(Price_delta < 0.75 & Units_sold_delta < 10), aes(x = Price_delta, y = Units_sold_delta, color = Revenue_delta)) +
geom_point() +
theme_minimal() +
ggtitle("Price Delta vs Sales Delta")
ggplot(pf %>% filter(Units_sold_delta < 7), aes(x = Units_sold_delta, y = Revenue_delta)) +
geom_point() +
theme_minimal() +
ggtitle("Sales Delta vs Revenue Delta")
# Correlation for the entire dataset (equivalent to df.corr())
cor(df %>% select(-Date))
# Boxplot of elasticity (elasticity range between -10 and 10)
ggplot(pf %>% filter(elasticity > -10 & elasticity < 10), aes(x = factor(Price), y = elasticity)) +
geom_boxplot() +
theme_minimal() +
ggtitle("Boxplot of Elasticity by Price")
# Scatterplot with Linear Model (Price vs Sales by Year)
ggplot(df, aes(x = Price, y = Units_sold, color = as.factor(Year))) +
geom_smooth(method = "lm") +
theme_minimal() +
ggtitle("Price vs Sales by Year")
# KDE Plot for Elasticity
ggplot(pf, aes(x = elasticity)) +
geom_density() +
theme_minimal() +
ggtitle("Density of Elasticity")
# Define classify_elasticity function
classify_elasticity <- function(coef) {
coef <- round(coef, 2)
if (coef < -100) {
return("high_elastic_N")
} else if (coef < -1) {
return("elastic_N")
} else if (coef < 0) {
return("inelastic_N")
} else if (coef < 1) {
return("inelastic_P")
} else if (coef > 1) {
return("elastic_P")
} else {
return("high_elastic_P")
}
}
# Apply classification function to elasticity and create a new column
pf <- pf %>% mutate(elastic_class = sapply(elasticity, classify_elasticity))
# Scatter plot classified by elasticity class
ggplot(pf %>% filter(Units_sold_delta < 10 & Units_sold_delta > -2), aes(x = Price_delta, y = Units_sold_delta, color = elastic_class)) +
geom_point() +
theme_minimal() +
ggtitle("Price Delta vs Sales Delta Classified by Elasticity")
# Linear regression model for 'Units_sold' as a function of 'Price' and 'Stock'
model1 <- lm(Units_sold ~ Price + Stock, data = df)
summary(model1)
# ANOVA for the model
anova(model1)
# Linear regression model for 'Revenue' as a function of 'Units_sold'
model2 <- lm(Revenue ~ Units_sold, data = df)
summary(model2)
# Calculate correlations (equivalent to eco.corr() in Python)
cor(eco %>% select(-Date))  # exclude non-numeric columns for correlation
# Calculate percent change for Stock, Price, Units_sold, and Revenue
eco <- eco %>%
mutate(Stock_delta = (Stock - lag(Stock)) / lag(Stock),
Price_delta = (Price - lag(Price)) / lag(Price),
Units_sold_delta = (Units_sold - lag(Units_sold)) / lag(Units_sold),
Revenue_delta = (Revenue - lag(Revenue)) / lag(Revenue)) %>%
drop_na()  # Removing the first row with NAs
# Price frame where Price_delta is not zero
pf <- eco %>% filter(Price_delta != 0)
# Calculate elasticity
pf <- pf %>% mutate(elasticity = Units_sold_delta / Price_delta)
ggplot(pf %>% filter(Price_delta < 0.75 & Units_sold_delta < 10), aes(x = Price_delta, y = Units_sold_delta, color = Revenue_delta)) +
geom_point() +
theme_minimal() +
ggtitle("Price Delta vs Sales Delta")
ggplot(pf %>% filter(Units_sold_delta < 7), aes(x = Units_sold_delta, y = Revenue_delta)) +
geom_point() +
theme_minimal() +
ggtitle("Sales Delta vs Revenue Delta")
# Correlation for the entire dataset (equivalent to df.corr())
cor(df %>% select(-Date))
# Boxplot of elasticity (elasticity range between -10 and 10)
ggplot(pf %>% filter(elasticity > -10 & elasticity < 10), aes(x = factor(Price), y = elasticity)) +
geom_boxplot() +
theme_minimal() +
ggtitle("Boxplot of Elasticity by Price")
# Scatterplot with Linear Model (Price vs Sales by Year)
ggplot(df, aes(x = Price, y = Units_sold, color = as.factor(Year))) +
geom_smooth(method = "lm") +
theme_minimal() +
ggtitle("Price vs Sales by Year")
# KDE Plot for Elasticity
ggplot(pf, aes(x = elasticity)) +
geom_density() +
theme_minimal() +
ggtitle("Density of Elasticity")
# Define classify_elasticity function
classify_elasticity <- function(coef) {
coef <- round(coef, 2)
if (coef < -100) {
return("high_elastic_N")
} else if (coef < -1) {
return("elastic_N")
} else if (coef < 0) {
return("inelastic_N")
} else if (coef < 1) {
return("inelastic_P")
} else if (coef > 1) {
return("elastic_P")
} else {
return("high_elastic_P")
}
}
# Apply classification function to elasticity and create a new column
pf <- pf %>% mutate(elastic_class = sapply(elasticity, classify_elasticity))
# Scatter plot classified by elasticity class
ggplot(pf %>% filter(Units_sold_delta < 10 & Units_sold_delta > -2), aes(x = Price_delta, y = Units_sold_delta, color = elastic_class)) +
geom_point() +
theme_minimal() +
ggtitle("Price Delta vs Sales Delta Classified by Elasticity")
# Scatter plot classified by elasticity class
ggplot(pf %>% filter(Units_sold_delta < 10 & Units_sold_delta > -2), aes(x = Price_delta, y = Units_sold_delta, color = elastic_class)) +
geom_point() +
theme_minimal() +
ggtitle("Price Delta vs Sales Delta Classified by Elasticity")
# Scatter plot classified by elasticity class
ggplot(pf %>% filter(Units_sold_delta < 10 & Units_sold_delta > -2), aes(x = Price_delta, y = Units_sold_delta, color = elastic_class)) +
geom_point() +
theme_minimal() +
ggtitle("Price Delta vs Sales Delta Classified by Elasticity")
